---
- name: Setup Eareeda Stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import output variable
      include_vars: vars/output_vars

    - name: Import Eereeda setup variable
      include_vars: vars/eereedastacksetup

    - name: Import VPC setup variable
      include_vars: vars/vpc_setup

    - name: Create Eereeda EC2 Key
      ec2_key:
        name: Eereeda-key-Stack
        region: "{{region}}"
      register: Eereeda_key_out

    - name: Save private Key into file Eereeda-key-Stack.pem
      copy:
        content: "{{Eereeda_key_out.key.private_key}}"
        dest: "./Eereeda-key-Stack.pem"
        mode: 0600
      when: Eereeda_key_out.changed

    - name: Create security group for Load Balancer
      ec2_group:
        name: Eereeda-LB-sg
        description: Allow port 80 from everywhere and all ports withn SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: EereedaELBSG_out

    - name: Create security group for Eereeda Stack
      ec2_group:
        name: Eereeda-Stack-sg
        description: Allow port 22 from everywhere and all ports withn SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{EereedaELBSG_out.group_id}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"
      register: EereedaStackSG_out

    - name: Create security group with its own SG ID
      ec2_group:
        name: Eereeda-Stack-sg
        description: Allow port 22 from everywhere and all ports withn SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{EereedaStackSG_out.group_id}}"

    - name: Creating Nginx Web01
      ec2:
        key_name: Eereeda-key-Stack
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "Web01"
          Project: Eereeda
          Owner: Meraj
        exact_count: 1
        count_tag:
          Name: "Web01"
          Project: Eereeda
          Owner: Meraj
        group_id: "{{EereedaStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: web01_out

    - name: Creating Tomcat App01
      ec2:
        key_name: Eereeda-key-Stack
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "App01"
          Project: Eereeda
          Owner: Meraj
        exact_count: 1
        count_tag:
          Name: "App01"
          Project: Eereeda
          Owner: Meraj
        group_id: "{{EereedaStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: app01_out

    - name: Creating Memcache Mc01
      ec2:
        key_name: Eereeda-key-Stack
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{memcache_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "Mc01"
          Project: Eereeda
          Owner: Meraj
        exact_count: 1
        count_tag:
          Name: "Mc01"
          Project: Eereeda
          Owner: Meraj
        group_id: "{{EereedaStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: mc01_out

    - name: Creating RabbitMQ RMQ01
      ec2:
        key_name: Eereeda-key-Stack
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "RMQ01"
          Project: Eereeda
          Owner: Meraj
        exact_count: 1
        count_tag:
          Name: "RMQ01"
          Project: Eereeda
          Owner: Meraj
        group_id: "{{EereedaStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: rmq01_out

    - name: Creating MySQL Db01
      ec2:
        key_name: Eereeda-key-Stack
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "Db01"
          Project: Eereeda
          Owner: Meraj
        exact_count: 1
        count_tag:
          Name: "Db01"
          Project: Eereeda
          Owner: Meraj
        group_id: "{{EereedaStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: db01_out

    - debug:
        var: db01_out.tagged_instances[0].id

#    - local_action:
#        module: ec2_elb_lb
#        name: "eereeda-elb"
#        region: "{{region}}"
#        state: present
#        instance_ids:
#          - "{{web01_out.tagged_instances[0].id}}"
#        purge_instance_ids: true
#        security_group_ids: "{{EereedaELBSG_out.group_id}}"
#        subnets:
#          - "{{PubSub1Cidr}}"
#          - "{{PubSub2Cidr}}"
#          - "{{PubSub3Cidr}}"
#        listeners:
#          - protocol: http
#            load_balancer_port: 80
#            instance_port: 80

#    - elb_application_lb:
#        name: eereeda-elb
#        region: "{{region}}"
#        instance_ids:
#          - "{{ web01_out.tagged_instances[0].id }}"
#        purge_instance_ids: true
#        security_groups:
#          - "{{EereedaELBSG_out.group_id}}"
#        subnets:
#          - "{{PubSub1Cidr}}"
#          - "{{PubSub2Cidr}}"
#          - "{{PubSub3Cidr}}"
#        listeners:
#          - Protocol: HTTP
#            Port: 80
#            instance_port: 80
#        state: present


    - local_action:
        module: ec2_elb_lb
        name: "test-please-delete"
        region: "{{region}}"
        state: present
        listeners:
          - protocol: http # options are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80

#    - name: Insert/Update Host IP & name in file provision-stack/group_vars/hostip
#      blockinfile:
#        path: provision-stack/group_vars/hostip
#        backup: yes
#        block: |
#          web01_ip: {{web01_out.tagged_instances[0].private_ip}}
#          app01_ip: {{app01_out.tagged_instances[0].private_ip}}
#          rmq01_ip: {{rmq01_out.tagged_instances[0].private_ip}}
#          mc01_ip: {{mc01_out.tagged_instances[0].private_ip}}
#          db01_ip: {{db01_out.tagged_instances[0].private_ip}}
#
#    - name: Copy login key to provision_stack directory
#      copy:
#        src: Eereeda-key-Stack.pem
#        dest: provision-stack/Eereeda-key-Stack.pem
#        mode: 0400
#
#    - name: Insert/Update Inventory file provision-stack/inventory-eereeda
#      blockinfile:
#        path: provision-stack/inventory-eereeda
#        block: |
#          web01 ansible_host= {{web01_out.tagged_instances[0].private_ip}}
#          app01 ansible_host= {{app01_out.tagged_instances[0].private_ip}}
#          rmq01 ansible_host= {{rmq01_out.tagged_instances[0].private_ip}}
#          mc01 ansible_host= {{mc01_out.tagged_instances[0].private_ip}}
#          db01 ansible_host= {{db01_out.tagged_instances[0].private_ip}}
#          cntl  ansible_host= 27.7.109.52 ansible_connection=local
#
#          [websrvgrp]
#          web01
#
#          [appsrvgrp]
#          app01
#
#          [rmqsrvgrp]
#          rmq01
#
#          [mcsrvgrp]
#          mc01
#
#          [dbsrvgrp]
#          db01
#
#          [control]
#          cntl
#
#          [stack_inst: children]
#          websrvgrp
#          appsrvgrp
#          rmqsrvgrp
#          mcsrvgrp
#          mcsrvgrp
#          dbsrvgrp
#
#          [stack_inst: vars]
#          ansible_user=ubuntu
#          ansible_ssh_private_key_file=Eereeda-key-Stack.pem
          #ansible_python_interpreter=/usr/bin/python3